import logging
import re
import csv
import os
from datetime import datetime, timedelta
from telegram import Update
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackContext
from apscheduler.schedulers.background import BackgroundScheduler
from apscheduler.triggers.cron import CronTrigger
import pytz

# === üîë –ù–ê–°–¢–†–û–ô–ö–ò ===
BOT_TOKEN = '7622730743:AAGhoElXAziGCWGNdURlUoNTdpaDVedHp2M'
GROUP_CHAT_ID = -1002942758131   # ‚Üê –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –∑–∞–º–µ–Ω–∏ –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π ID!
TIMEZONE = 'Europe/Moscow'
CSV_FILE = 'deliveries.csv'

# === üìù –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ===
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# === üóÉÔ∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è CSV (—Å–æ–∑–¥–∞—ë–º —Ñ–∞–π–ª —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏, –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç) ===
def init_csv():
    if not os.path.exists(CSV_FILE):
        with open(CSV_FILE, mode='w', encoding='utf-8', newline='') as f:
            writer = csv.writer(f)
            writer.writerow(['timestamp', 'courier_user_id', 'courier_username', 'amount', 'message_id', 'status'])
        logger.info(f"–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Ñ–∞–π–ª: {CSV_FILE}")

# === üì• –ü–∞—Ä—Å–∏–Ω–≥ —Å–æ–æ–±—â–µ–Ω–∏—è ===
def parse_delivery_message(text: str):
    match = re.search(r'\+(\d+)\s+@?(\w+)', text)
    if match:
        try:
            amount = int(match.group(1))
            username = match.group(2)
            return username, amount
        except ValueError:
            pass
    return None, None

# === üì¨ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π ===
def handle_group_message(update: Update, context: CallbackContext):
    if update.effective_chat.id != GROUP_CHAT_ID:
        return

    user_id = update.effective_user.id
    username = update.effective_user.username or 'unknown'
    message_id = update.message.message_id
    text = (update.message.text or "").strip()

    parsed_user, amount = parse_delivery_message(text)
    if not parsed_user or not amount:
        logger.debug(f"–ù–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: {text}")
        return

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –Ω—É–∂–Ω–æ–π –∑–æ–Ω–µ
    tz = pytz.timezone(TIMEZONE)
    now = datetime.now(tz).strftime('%Y-%m-%d %H:%M:%S')

    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ CSV
    try:
        with open(CSV_FILE, mode='a', encoding='utf-8', newline='') as f:
            writer = csv.writer(f)
            writer.writerow([now, user_id, username, amount, message_id, 'delivered'])
        logger.info(f"‚úÖ –ó–∞–∫–∞–∑ —Å–æ—Ö—Ä–∞–Ω—ë–Ω: @{username} ‚Äî {amount} —Ä—É–±.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ CSV: {e}")

# === üìä –°—á–∏—Ç–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –Ω–µ–¥–µ–ª—é –∏–∑ CSV ===
def get_weekly_stats():
    tz = pytz.timezone(TIMEZONE)
    today = datetime.now(tz).date()
    start_of_week = today - timedelta(days=today.weekday())

    stats = {}
    if not os.path.exists(CSV_FILE):
        return []

    try:
        with open(CSV_FILE, mode='r', encoding='utf-8') as f:
            reader = csv.DictReader(f)
            for row in reader:
                try:
                    # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É
                    ts = datetime.strptime(row['timestamp'], '%Y-%m-%d %H:%M:%S').date()
                    if ts < start_of_week:
                        continue
                    if row.get('status') != 'delivered':
                        continue

                    user_id = row['courier_user_id']
                    username = row['courier_username'] or 'unknown'
                    amount = int(row['amount'])

                    key = (user_id, username)
                    if key not in stats:
                        stats[key] = 0
                    stats[key] += amount
                except Exception as e:
                    logger.warning(f"–ü—Ä–æ–ø—É—â–µ–Ω–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç—Ä–æ–∫–∞: {row} | –û—à–∏–±–∫–∞: {e}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è CSV: {e}")
        return []

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é —Å—É–º–º—ã
    sorted_stats = sorted(stats.items(), key=lambda x: x[1], reverse=True)
    return [(username, user_id, total) for ((user_id, username), total) in sorted_stats]
def stats_command(update: Update, context: CallbackContext):
    stats = get_weekly_stats()
    if not stats:
        update.message.reply_text("–ó–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é –Ω–µ—Ç –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤.")
        return

    message = "üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é:*\n\n"
    
    # –ü–µ—Ä–≤—ã–π –≤ —Å–ø–∏—Å–∫–µ ‚Äî –ª—É—á—à–∏–π (—Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —É–±—ã–≤–∞–Ω–∏—é)
    best_username, best_user_id, best_total = stats[0]
    best_mention = f"@{best_username}" if best_username != 'unknown' else f"user_{best_user_id}"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –ª—É—á—à–∏–º
    message += f"ü•á *–õ—É—á—à–∏–π –∫—É—Ä—å–µ—Ä –Ω–µ–¥–µ–ª–∏: {best_mention} ‚Äî {best_total} —Ä—É–±.!*\n\n"
    
    # –û—Å—Ç–∞–ª—å–Ω—ã–µ –∫—É—Ä—å–µ—Ä—ã
    for username, user_id, total in stats:
        mention = f"@{username}" if username != 'unknown' else f"user_{user_id}"
        if username == best_username and user_id == best_user_id:
            continue  # —É–∂–µ –ø–æ–∫–∞–∑–∞–ª–∏
        message += f"{mention}: *{total} —Ä—É–±.*\n"
    
    if len(stats) == 1:
        message += "_–¢—ã —Å—Ä–∞–∂–∞–µ—à—å—Å—è –≤ –æ–¥–∏–Ω–æ—á–∫—É... –Ω–æ –¥–µ—Ä–∂–∏—à—å –ø–ª–∞–Ω! üí™_"

    update.message.reply_text(message, parse_mode='Markdown')

# === üìÖ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç ===
def send_weekly_report(context: CallbackContext):
    stats = get_weekly_stats()
    if not stats:
        message = "–ù–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ –Ω–µ –±—ã–ª–æ –∑–∞–∫–∞–∑–æ–≤ üò¢"
    else:
        best_username, best_user_id, best_total = stats[0]
        best_mention = f"@{best_username}" if best_username != 'unknown' else f"user_{best_user_id}"
        
        message = "üìÜ *–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç –ø–æ –∫—É—Ä—å–µ—Ä–∞–º*\n\n"
        message += f"üèÜ *–õ—É—á—à–∏–π –∫—É—Ä—å–µ—Ä –Ω–µ–¥–µ–ª–∏:*\n{best_mention} ‚Äî *{best_total} —Ä—É–±.!*\n\n"
        message += "üìã –û—Å—Ç–∞–ª—å–Ω—ã–µ:\n"
        
        for username, user_id, total in stats:
            mention = f"@{username}" if username != 'unknown' else f"user_{user_id}"
            if username == best_username and user_id == best_user_id:
                continue
            message += f"‚Ä¢ {mention}: *{total} —Ä—É–±.*\n"
        
        if len(stats) == 1:
            message += "\n_–ì–µ—Ä–æ–π-–æ–¥–∏–Ω–æ—á–∫–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–∏! –†–µ—Å–ø–µ–∫—Ç!_"

    context.bot.send_message(chat_id=GROUP_CHAT_ID, text=message, parse_mode='Markdown')

# === ‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫ ===
def main():
    init_csv()
    updater = Updater(BOT_TOKEN, use_context=True)
    dp = updater.dispatcher

    dp.add_handler(MessageHandler(Filters.chat(GROUP_CHAT_ID) & Filters.text, handle_group_message))
    dp.add_handler(CommandHandler("stats", stats_command))

    tz = pytz.timezone(TIMEZONE)
    scheduler = BackgroundScheduler(timezone=tz)
    scheduler.start()
    scheduler.add_job(
        send_weekly_report,
        CronTrigger(day_of_week=0, hour=9, minute=0, timezone=tz),
        args=[updater.job_queue]
    )

    updater.start_polling()
    logger.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ deliveries.csv")
    updater.idle()

if __name__ == '__main__':
    main()